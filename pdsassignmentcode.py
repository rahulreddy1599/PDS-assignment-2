# -*- coding: utf-8 -*-
"""PDSassignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PE95zjgpyFWEy-6KSray5gPtj8X_4h3B

CODE for question A
"""

#import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Data loading using pandas
data = pd.read_csv('diabetes.csv')

# setting seed for work reproducability
np.random.seed(1234)

# Random sample of 25 observations
random_sample = data.sample(n=25)

# Calculate mean and maximum glucose values for sample and population
mean_random_sample_glucose = random_sample['Glucose'].mean()
highest_random_sample_glucose = random_sample['Glucose'].max()

mean_population_glucose = data['Glucose'].mean()
highest_population_glucose = data['Glucose'].max()

# To compare mean glucose values create a bar chart
plt.bar(['Sample Mean', 'Population Mean'], [mean_random_sample_glucose, mean_population_glucose])
plt.title('Mean Glucose Values comparison')
plt.ylabel('Glucose value')
plt.show()

# To compare highest glucose values create a bar chart
plt.bar(['Sample Highest', 'Population Highest'], [highest_random_sample_glucose, highest_population_glucose])
plt.title('Highest Glucose Values comparison')
plt.ylabel('Glucose value')
plt.show()

"""CODE for question B"""

# Find the 98th percentile of BMI for the sample and population
sample_percentile = np.percentile(random_sample['BMI'], 98)
population_percentile = np.percentile(data['BMI'], 98)

# Create a bar chart comparing the 98th percentile of BMI for the sample and population
fig, ax = plt.subplots()
ax.hist([random_sample['BMI'], data['BMI']], bins=10, label=['Sample', 'Population'])
ax.axvline(x=sample_percentile, linestyle='--', color='red', label='98th Percentile (Sample)')
ax.axvline(x=population_percentile, linestyle='--', color='green', label='98th Percentile (Population)')
ax.set_title('Comparison of BMI Distribution')
ax.set_xlabel('BMI')
ax.set_ylabel('Frequency')
ax.legend()
plt.show()

"""CODE for question C"""

# Defining a bootstap function
def bootstrap_statistics(data, n_samples, sample_size):
    means = []
    stds = []
    percentiles = []
    for i in range(n_samples):
        sample = data.sample(sample_size, replace=True)
        means.append(sample['BloodPressure'].mean())
        stds.append(sample['BloodPressure'].std())
        percentiles.append(np.percentile(sample['BloodPressure'], 95))
    return means, stds, percentiles

# Create 500 bootstrap samples of 150 observations each
means, stds, percentiles = bootstrap_statistics(data, 500, 150)

# Find population statistics for BloodPressure
population_mean = data['BloodPressure'].mean()
population_std = data['BloodPressure'].std()
population_percentile = np.percentile(data['BloodPressure'], 95)

# Create box plots comparing mean, standard deviation, and percentile of BloodPressure for sample and population
fig, axs = plt.subplots(1, 3, figsize=(10,5))
axs[0].boxplot([means, [population_mean]*500], labels=['Sample', 'Population'])
axs[0].set_title('Mean comparison')
axs[0].set_ylabel('BloodPressure')
axs[1].boxplot([stds, [population_std]*500], labels=['Sample', 'Population'])
axs[1].set_title('Standard Deviation comparison')
axs[1].set_ylabel('BloodPressure')
axs[2].boxplot([percentiles, [population_percentile]*500], labels=['Sample', 'Population'])
axs[2].set_title('95th Percentile comparison')
axs[2].set_ylabel('BloodPressure')
plt.show()